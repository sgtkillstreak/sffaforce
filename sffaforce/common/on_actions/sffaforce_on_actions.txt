# Triggered when two empires discover each other
on_first_contact = {
	events = {
	}
}

# Triggers country_event for the attacker upon victory
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_win = {
	events = {
	sffaforce.2
	}
}

# Triggers country_event for the attacker upon defeat
# This = country, attack leader
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_lose = {
	events = {
	sffaforce.2
	}
}

# Triggers country_event for the defender upon victory
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
	}
}

# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_lose = {
	events = {
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
on_survey = {
	random_events = {
		50 = 0
		3 = sffaforceanom.3
	}
}

# A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
# From = Country
# Root = Planet
on_planet_surveyed = {
	events = {
		sffaforce.3
	}
}

# A ship is done surveying the last unsurveyed planet in a system
# Scope = ship
# From = system
on_system_survey = {
	events = {
	}
}

# A planet has begun the colonization process.
# Scope = Planet
on_colonization_started = {
	events = {
	}
	random_events = {
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
	}
}

# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
on_colony_destroyed = {
	events = {
	}
}

# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
	}
	random_events = {
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_victim = {
	events = {
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_perp = {
	events = {
	sffaforce.1
	}
	random_events = {
	}
}

# This = country
# From = opponent war leader
on_entering_war = {
	events = {
	}
}

# Pop is enslaved
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_enslaved = {
	events = {
	}
}

# Pop is released from slavery
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_emancipated = {
	events = {
	}
}

# Executed right after country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
on_post_communications_established = {
	events = {
	}
}

# Executed as a leader has died
# This = Country
# From = Leader
on_leader_death = {
	events = {
	}
}

# A leader leveled up.
# Scope = Country
# From = Leader
on_leader_level_up = {
	events = {
	sffaforceupgrade.2
	}
}

# Executed as new ruler has been set
# This = Country
on_ruler_set = {
	events = {
	}
}

# Executed when a ruler has been removed
# From = Previous Ruler
# This = Country
on_ruler_removed = {
	events = {
	}
}

# From = Tile
# This = Planet
on_blocker_cleared = {
	events = {
		sffaforce.4
	}
}
